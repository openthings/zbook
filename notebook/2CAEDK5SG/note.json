{
  "paragraphs": [
    {
      "text": "%md\n## Magellan: Geospatial Analytics on Spark\nBy [Ram Sriharsha](http://hortonworks.com/blog/author/rsriharsha/)\n\n#### Pre-requisistes\nThis notebook requires Spark 1.4.1\n\n#### Introduction\nGeospatial data is pervasive—in mobile devices, sensors, logs, and wearables. This data’s spatial context is an important variable in many predictive analytics applications.\n\nTo benefit from spatial context in a predictive analytics application, we need to be able to parse geospatial datasets at scale, join them with target datasets that contain point in space information, and answer geometrical queries efficiently.\n\nUnfortunately, if you are working with geospatial data and big data sets that need spatial context, there are limited open source tools that make it easy for you to parse and efficiently query spatial datasets at scale. This poses significant challenges for leveraging geospatial data in business intelligence and predictive analytics applications.\n\nThis is the problem that [Magellan](https://github.com/harsha2010/magellan) sets out to solve. Magellan is an open source library for Geospatial Analytics that uses [Apache Spark](http://spark.apache.org/) as the underlying execution engine. Magellan facilitates geospatial queries and builds upon Spark to solve hard problems of dealing with geospatial data at scale.\n\nIn this notebook, we will introduce the problem of geospatial analytics and show how Magellan allows users to ingest geospatial data and run spatial queries at scale.\n\nTo do so, we will analyze the problem of using Uber data to examine the flow of uber traffic in the city of San Francisco.",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003eMagellan: Geospatial Analytics on Spark\u003c/h2\u003e\n\u003cp\u003eBy \u003ca href\u003d\"http://hortonworks.com/blog/author/rsriharsha/\"\u003eRam Sriharsha\u003c/a\u003e\u003c/p\u003e\n\u003ch4\u003ePre-requisistes\u003c/h4\u003e\n\u003cp\u003eThis notebook requires Spark 1.4.1\u003c/p\u003e\n\u003ch4\u003eIntroduction\u003c/h4\u003e\n\u003cp\u003eGeospatial data is pervasive—in mobile devices, sensors, logs, and wearables. This data’s spatial context is an important variable in many predictive analytics applications.\u003c/p\u003e\n\u003cp\u003eTo benefit from spatial context in a predictive analytics application, we need to be able to parse geospatial datasets at scale, join them with target datasets that contain point in space information, and answer geometrical queries efficiently.\u003c/p\u003e\n\u003cp\u003eUnfortunately, if you are working with geospatial data and big data sets that need spatial context, there are limited open source tools that make it easy for you to parse and efficiently query spatial datasets at scale. This poses significant challenges for leveraging geospatial data in business intelligence and predictive analytics applications.\u003c/p\u003e\n\u003cp\u003eThis is the problem that \u003ca href\u003d\"https://github.com/harsha2010/magellan\"\u003eMagellan\u003c/a\u003e sets out to solve. Magellan is an open source library for Geospatial Analytics that uses \u003ca href\u003d\"http://spark.apache.org/\"\u003eApache Spark\u003c/a\u003e as the underlying execution engine. Magellan facilitates geospatial queries and builds upon Spark to solve hard problems of dealing with geospatial data at scale.\u003c/p\u003e\n\u003cp\u003eIn this notebook, we will introduce the problem of geospatial analytics and show how Magellan allows users to ingest geospatial data and run spatial queries at scale.\u003c/p\u003e\n\u003cp\u003eTo do so, we will analyze the problem of using Uber data to examine the flow of uber traffic in the city of San Francisco.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150290_1383928862",
      "id": "20151025-015106_840181723",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Mapping the flow of Uber traffic in San Francisco with Magellan\nUber has published a dataset of GPS coordinates of [all trips within San Francisco](https://raw.githubusercontent.com/dima42/uber-gps-analysis/master/gpsdata/all.tsv).\n\nOur goal in this example is to join the Uber dataset with the [San Francisco neighborhoods dataset](http://www.arcgis.com/home/item.html?id\u003d3b2a461c2c7848899b7b4cbfa9ebdb67)) to obtain some interesting insights into the patterns of Uber trips in San Francisco.\n\nMagellan has both Scala and Python bindings. In this blog post we use  the Scala APIs.\nMagellan is a Spark Package, and can be included into Zeppelin as below:",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch4\u003eMapping the flow of Uber traffic in San Francisco with Magellan\u003c/h4\u003e\n\u003cp\u003eUber has published a dataset of GPS coordinates of \u003ca href\u003d\"https://raw.githubusercontent.com/dima42/uber-gps-analysis/master/gpsdata/all.tsv\"\u003eall trips within San Francisco\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eOur goal in this example is to join the Uber dataset with the \u003ca href\u003d\"http://www.arcgis.com/home/item.html?id\u003d3b2a461c2c7848899b7b4cbfa9ebdb67\"\u003eSan Francisco neighborhoods dataset\u003c/a\u003e) to obtain some interesting insights into the patterns of Uber trips in San Francisco.\u003c/p\u003e\n\u003cp\u003eMagellan has both Scala and Python bindings. In this blog post we use  the Scala APIs.\n\u003cbr  /\u003eMagellan is a Spark Package, and can be included into Zeppelin as below:\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150291_1383544114",
      "id": "20151025-015341_1752661711",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Import Magellan from maven",
      "text": "%dep\nz.addRepo(\"Spark Packages Repo\").url(\"http://dl.bintray.com/spark-packages/maven\")\nz.load(\"com.esri.geometry:esri-geometry-api:1.2.1\")\nz.load(\"harsha2010:magellan:1.0.3-s_2.10\")",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res1: org.apache.zeppelin.spark.dep.Dependency \u003d org.apache.zeppelin.spark.dep.Dependency@7c4bd48\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150291_1383544114",
      "id": "20151025-012854_1186772690",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Import datasets and upload to HDFS",
      "text": "%sh\nmkdir magellan\nwget https://www.dropbox.com/s/98yz5j6fc4qph3v/all.tsv -P magellan/ -nv\nwget https://www.dropbox.com/s/ttp3kyr9l8hzjdz/planning_neighborhoods.zip -P magellan/ -nv\nunzip magellan/planning_neighborhoods.zip -d magellan/\nhadoop fs -put magellan .\nhadoop fs -ls magellan",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sh",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "2015-10-25 01:48:20 URL:https://dl.dropboxusercontent.com/content_link/boAcNV0LO3ylxIfmKJf8kR44Jaen3rk21rDD6UzMldXp2w5B0j81ClprWSTAYskp/file [60947802/60947802] -\u003e \"magellan/all.tsv\" [1]\n2015-10-25 01:48:21 URL:https://dl.dropboxusercontent.com/content_link/NmsiQZ6j1ASyuo4HH4Ibg2nMLgbqzsOTZmXJzQUv9Zzgg3IVaMkNzLSlEalywhme/file [163771/163771] -\u003e \"magellan/planning_neighborhoods.zip\" [1]\nArchive:  magellan/planning_neighborhoods.zip\n  inflating: magellan/planning_neighborhoods.dbf  \n  inflating: magellan/planning_neighborhoods.shx  \n  inflating: magellan/planning_neighborhoods.shp.xml  \n  inflating: magellan/planning_neighborhoods.shp  \n  inflating: magellan/planning_neighborhoods.sbx  \n  inflating: magellan/planning_neighborhoods.sbn  \n  inflating: magellan/planning_neighborhoods.prj  \nFound 9 items\n-rw-r--r--   3 zeppelin zeppelin   60947802 2015-10-25 01:48 magellan/all.tsv\n-rw-r--r--   3 zeppelin zeppelin       1028 2015-10-25 01:48 magellan/planning_neighborhoods.dbf\n-rw-r--r--   3 zeppelin zeppelin        567 2015-10-25 01:48 magellan/planning_neighborhoods.prj\n-rw-r--r--   3 zeppelin zeppelin        516 2015-10-25 01:48 magellan/planning_neighborhoods.sbn\n-rw-r--r--   3 zeppelin zeppelin        164 2015-10-25 01:48 magellan/planning_neighborhoods.sbx\n-rw-r--r--   3 zeppelin zeppelin     214576 2015-10-25 01:48 magellan/planning_neighborhoods.shp\n-rw-r--r--   3 zeppelin zeppelin      21958 2015-10-25 01:48 magellan/planning_neighborhoods.shp.xml\n-rw-r--r--   3 zeppelin zeppelin        396 2015-10-25 01:48 magellan/planning_neighborhoods.shx\n-rw-r--r--   3 zeppelin zeppelin     163771 2015-10-25 01:48 magellan/planning_neighborhoods.zip\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150291_1383544114",
      "id": "20151025-012904_1717377650",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Spark imports",
      "text": "import magellan.{Point, Polygon, PolyLine}\nimport magellan.coord.NAD83\nimport org.apache.spark.sql.magellan.MagellanContext\nimport org.apache.spark.sql.magellan.dsl.expressions._\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.types._",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import magellan.{Point, Polygon, PolyLine}\nimport magellan.coord.NAD83\nimport org.apache.spark.sql.magellan.MagellanContext\nimport org.apache.spark.sql.magellan.dsl.expressions._\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.types._\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150296_1380081373",
      "id": "20151021-080812_605865139",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nLet us create a case class to attach the schema to this Uber Dataset so we can use the DataFrame abstraction to deal with the data.",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eLet us create a case class to attach the schema to this Uber Dataset so we can use the DataFrame abstraction to deal with the data.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150300_1378542378",
      "id": "20151025-015817_871979116",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create case class for Uber dataset",
      "text": "case class UberRecord(tripId: String, timestamp: String, point: Point)",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "defined class UberRecord\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150301_1378157629",
      "id": "20151021-080833_1323347800",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNow we can read the dataset into a dataframe and cache the resulting dataframe.",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eNow we can read the dataset into a dataframe and cache the resulting dataframe.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150301_1378157629",
      "id": "20151025-015906_914671593",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Read Uber dataset into dataframe",
      "text": "val uber \u003d sc.textFile(\"magellan/all.tsv\").map { line \u003d\u003e\nval parts \u003d line.split(\"\\t\" )\nval tripId \u003d parts(0)\nval timestamp \u003d parts(1)\nval point \u003d Point(parts(3).toDouble, parts(2).toDouble)\nUberRecord(tripId, timestamp, point)\n}.\nrepartition(100).\ntoDF().\ncache()",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "uber: org.apache.spark.sql.DataFrame \u003d [tripId: string, timestamp: string, point: poin]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150304_1364691417",
      "id": "20151021-080848_729642312",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThis dataset contains the trip id, the timestamp and the latitude and longitude of each point on the trip coalesced into a Point data structure.\n\nA Point is the simplest geometric data structure available in Magellan. It represents a two dimensional point, with x and y coordinates. In this case, as is standard in geospatial analysis, the x coordinate refers to the longitude and the y coordinate the latitude.\n\nSince this dataset is not interesting in itself, we need to enrich this dataset by determining which neighborhood each of these points lie in.\n\nTo do so, we will convert the neighborhood dataset into a dataframe as well, assuming the dataset has been downloaded and the path to the dataset is neighborhoods.path.\n\nThis dataset is in what is known as the [ESRI Shapefile format](https://www.esri.com/library/whitepapers/pdfs/shapefile.pdf).\n\nThis is one of the most common formats in which geospatial data is stored. Magellan has a Data Source implementation that understands how to parse ESRI Shapefiles into Shapes and Metadata.",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eThis dataset contains the trip id, the timestamp and the latitude and longitude of each point on the trip coalesced into a Point data structure.\u003c/p\u003e\n\u003cp\u003eA Point is the simplest geometric data structure available in Magellan. It represents a two dimensional point, with x and y coordinates. In this case, as is standard in geospatial analysis, the x coordinate refers to the longitude and the y coordinate the latitude.\u003c/p\u003e\n\u003cp\u003eSince this dataset is not interesting in itself, we need to enrich this dataset by determining which neighborhood each of these points lie in.\u003c/p\u003e\n\u003cp\u003eTo do so, we will convert the neighborhood dataset into a dataframe as well, assuming the dataset has been downloaded and the path to the dataset is neighborhoods.path.\u003c/p\u003e\n\u003cp\u003eThis dataset is in what is known as the \u003ca href\u003d\"https://www.esri.com/library/whitepapers/pdfs/shapefile.pdf\"\u003eESRI Shapefile format\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis is one of the most common formats in which geospatial data is stored. Magellan has a Data Source implementation that understands how to parse ESRI Shapefiles into Shapes and Metadata.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150304_1364691417",
      "id": "20151025-020046_206115557",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create MagellanContext",
      "text": "val magellanContext \u003d new MagellanContext(sc)",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "magellanContext: org.apache.spark.sql.magellan.MagellanContext \u003d org.apache.spark.sql.magellan.MagellanContext@b79fffa\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150304_1364691417",
      "id": "20151021-080900_1112437015",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThere are two columns in this DataFrame: a shape representing the neighborhood which happens to be polygonal, and metadata which is a map of String keys and String values.\n\nMagellan has a Polygon data structure to capture the spatial geometry of a Polygon. A Polygon in Magellan stands for a Polygonal object with zero or more holes.\nMap columns can be exploded into their keys and values to yield the following dataframe:",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eThere are two columns in this DataFrame: a shape representing the neighborhood which happens to be polygonal, and metadata which is a map of String keys and String values.\u003c/p\u003e\n\u003cp\u003eMagellan has a Polygon data structure to capture the spatial geometry of a Polygon. A Polygon in Magellan stands for a Polygonal object with zero or more holes.\n\u003cbr  /\u003eMap columns can be exploded into their keys and values to yield the following dataframe:\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150309_1362767673",
      "id": "20151025-020230_2044689047",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load neighborhoods dataset into DataFrame representing each one as polygon and metadata",
      "text": "val neighborhoods \u003d magellanContext.read.format(\"magellan\").\nload(\"magellan\").\nselect($\"polygon\", $\"metadata\").\ncache()",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "neighborhoods: org.apache.spark.sql.DataFrame \u003d [polygon: pol, metadata: map\u003cstring,string\u003e]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150309_1362767673",
      "id": "20151021-080931_281898278",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "View sample of neighbourhood DataFrame",
      "text": "neighborhoods.select(explode($\"metadata\").as(Seq(\"k\", \"v\"))).show(5)",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----------+--------------------+\n|         k|                   v|\n+----------+--------------------+\n|neighborho|Twin Peaks       ...|\n|neighborho|Pacific Heights  ...|\n|neighborho|Visitacion Valley...|\n|neighborho|Potrero Hill     ...|\n|neighborho|Crocker Amazon   ...|\n+----------+--------------------+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150309_1362767673",
      "id": "20151021-080945_1330980387",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNow we are getting somewhere: we are able to parse the San Francisco neighborhood dataset, extract its metadata as well as the polygon shapes that represent each neighborhood. \nThe natural next step is to join this dataset with the uber dataset so that each point on the uber trip can be associated with its corresponding neighborhood.  \n\nHere we run into an important spatial query: How do we compute whether a given point (uber location) lies within a given polygon (or neighborhood) ?\n\nMagellan implements th as well as other spatial operators like intersects, intersection, contains, covers etc making it easy to use.\nIn Magellan, to join the Uber dataset with the San Francisco neighborhood dataset, you would issue the following Spark SQL query:",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eNow we are getting somewhere: we are able to parse the San Francisco neighborhood dataset, extract its metadata as well as the polygon shapes that represent each neighborhood.\n\u003cbr  /\u003eThe natural next step is to join this dataset with the uber dataset so that each point on the uber trip can be associated with its corresponding neighborhood.\u003c/p\u003e\n\u003cp\u003eHere we run into an important spatial query: How do we compute whether a given point (uber location) lies within a given polygon (or neighborhood) ?\u003c/p\u003e\n\u003cp\u003eMagellan implements th as well as other spatial operators like intersects, intersection, contains, covers etc making it easy to use.\n\u003cbr  /\u003eIn Magellan, to join the Uber dataset with the San Francisco neighborhood dataset, you would issue the following Spark SQL query:\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150312_1361613426",
      "id": "20151025-020336_1732297633",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Map Uber Trips to neighborhoods",
      "text": "neighborhoods.\njoin(uber).\nwhere($\"point\" within $\"polygon\").\nselect($\"tripId\", $\"timestamp\", explode($\"metadata\").as(Seq(\"k\", \"v\"))).\nwithColumnRenamed(\"v\", \"neighborhood\").\ndrop(\"k\").\nshow(5)",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+---------+------------+\n|tripId|timestamp|neighborhood|\n+------+---------+------------+\n+------+---------+------------+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150315_1361998175",
      "id": "20151021-081009_570116241",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThis is interesting: According to our calculation, the GPS coordinates representing the Uber dataset do not fall in any of the San Francisco neighborhoods. How can this be?\n\nThis is a good point to pause and think about coordinate systems. We have been using GPS coordinates for the Uber dataset, but haven’t verified the coordinate system that the San Francisco neighborhood dataset has been encoded in.\n\nIt turns out that most datasets published by the US governmental agencies use what is called State Plane coordinates.\n\nMagellan supports translating between different coordinate systems by implementing a transformer interface which takes in Points and outputs Points.\n\nThis covers all conformal transformations which is the set of all transformations that preserve angles.\nIn particular, to translate between WGS84, the GPS standard coordinate system used in the Uber dataset, and NAD83 Zone 403 (state plane), we can use the following in built transformer:",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eThis is interesting: According to our calculation, the GPS coordinates representing the Uber dataset do not fall in any of the San Francisco neighborhoods. How can this be?\u003c/p\u003e\n\u003cp\u003eThis is a good point to pause and think about coordinate systems. We have been using GPS coordinates for the Uber dataset, but haven’t verified the coordinate system that the San Francisco neighborhood dataset has been encoded in.\u003c/p\u003e\n\u003cp\u003eIt turns out that most datasets published by the US governmental agencies use what is called State Plane coordinates.\u003c/p\u003e\n\u003cp\u003eMagellan supports translating between different coordinate systems by implementing a transformer interface which takes in Points and outputs Points.\u003c/p\u003e\n\u003cp\u003eThis covers all conformal transformations which is the set of all transformations that preserve angles.\n\u003cbr  /\u003eIn particular, to translate between WGS84, the GPS standard coordinate system used in the Uber dataset, and NAD83 Zone 403 (state plane), we can use the following in built transformer:\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150316_1360074431",
      "id": "20151025-020407_503661891",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create Translator between Uber and Neighborhood coordinate systems",
      "text": "val transformer: Point \u003d\u003e Point \u003d (point: Point) \u003d\u003e {\nval from \u003d new NAD83(Map(\"zone\" -\u003e 403)).from()\nval p \u003d point.transform(from)\nnew Point(3.28084 * p.x, 3.28084 * p.y)\n}",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "transformer: magellan.Point \u003d\u003e magellan.Point \u003d \u003cfunction1\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150316_1360074431",
      "id": "20151021-081020_167250911",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nHere we have defined a new transformer that applies the NAD83 transformation for Zone 403 (Northern California) and further scales the points to have units in feet instead of meters.\nThis allows us to enhance the uber dataset by adding a new column, the scaled column representing the coordinates in the NAD83 State Plane Coordinate System:",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eHere we have defined a new transformer that applies the NAD83 transformation for Zone 403 (Northern California) and further scales the points to have units in feet instead of meters.\n\u003cbr  /\u003eThis allows us to enhance the uber dataset by adding a new column, the scaled column representing the coordinates in the NAD83 State Plane Coordinate System:\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150331_1368154158",
      "id": "20151025-020441_781592444",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Add translated Coordinates column to Uber dataFrame",
      "text": "val uberTransformed \u003d uber.\nwithColumn(\"nad83\", $\"point\".transform(transformer)).\ncache()",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "uberTransformed: org.apache.spark.sql.DataFrame \u003d [tripId: string, timestamp: string, point: poin, nad83: poin]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150332_1366230413",
      "id": "20151021-081042_1983405488",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNow we are ready to perform the join again:",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eNow we are ready to perform the join again:\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150337_1450490422",
      "id": "20151025-020503_1617259756",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Map Uber Trips To Neighborhoods",
      "text": "val joined \u003d neighborhoods.\njoin(uberTransformed).\nwhere($\"nad83\" within $\"polygon\").\nselect($\"tripId\", $\"timestamp\", explode($\"metadata\").as(Seq(\"k\", \"v\"))).\nwithColumnRenamed(\"v\", \"neighborhood\").\ndrop(\"k\").\ncache()",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "joined: org.apache.spark.sql.DataFrame \u003d [tripId: string, timestamp: string, neighborhood: string]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150338_1451644669",
      "id": "20151021-081053_1128907682",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "joined.show(5)",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+--------------------+--------------------+\n|tripId|           timestamp|        neighborhood|\n+------+--------------------+--------------------+\n| 12478|2007-01-05T04:55:...|Haight Ashbury   ...|\n| 12483|2007-01-07T07:37:...|Mission          ...|\n| 12484|2007-01-02T04:02:...|South of Market  ...|\n| 12487|2007-01-07T04:26:...|Downtown/Civic Ce...|\n| 12489|2007-01-07T03:00:...|Castro/Upper Mark...|\n+------+--------------------+--------------------+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150339_1451259920",
      "id": "20151021-081102_231185976",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nOk, this looks much more reasonable!\nOne interesting question we are now ready to ask is: What are the top few neighborhoods where most Uber trips pass through?",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eOk, this looks much more reasonable!\n\u003cbr  /\u003eOne interesting question we are now ready to ask is: What are the top few neighborhoods where most Uber trips pass through?\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150339_1451259920",
      "id": "20151025-020526_1159970756",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show top neighborhoods where most Uber trips pass through",
      "text": "joined.\ngroupBy($\"neighborhood\").\nagg(countDistinct(\"tripId\").\nas(\"trips\")).\norderBy(col(\"trips\").desc).\nshow(5)",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+-----+\n|        neighborhood|trips|\n+--------------------+-----+\n|South of Market  ...| 9891|\n|Western Addition ...| 6794|\n|Downtown/Civic Ce...| 6697|\n|Financial Distric...| 6038|\n|Mission          ...| 5620|\n+--------------------+-----+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150340_1449336175",
      "id": "20151021-081113_1220870628",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThere are about 24664 trips for which we have neighborhood information, out of which close to 40% of the trips involve SOMA. \nNow if you are an Uber driver, you may just want to hang out around SOMA.",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eThere are about 24664 trips for which we have neighborhood information, out of which close to 40% of the trips involve SOMA.\n\u003cbr  /\u003eNow if you are an Uber driver, you may just want to hang out around SOMA.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150340_1449336175",
      "id": "20151021-081125_2064619705",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nAs we see, once we add geospatial context to the Uber dataset, we end up with a fascinating array of questions we can ask about the nature of Uber trips in the city of San Francisco.\n\n### Summary\n\nIn this blog post, we have shown how to use Magellan to perform geospatial analysis on Spark.\n\nHopefully this short introduction has demonstrated how easy and elegant it is to incorporate geospatial context in your applications using Magellan.\n\nIn the future, we will go under the hood to examine how Magellan leverages Spark SQL, Data Frames and Catalyst to provide elegant and simple user APIs while ensuring that spatial queries can execute efficiently.\n",
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eAs we see, once we add geospatial context to the Uber dataset, we end up with a fascinating array of questions we can ask about the nature of Uber trips in the city of San Francisco.\u003c/p\u003e\n\u003ch3\u003eSummary\u003c/h3\u003e\n\u003cp\u003eIn this blog post, we have shown how to use Magellan to perform geospatial analysis on Spark.\u003c/p\u003e\n\u003cp\u003eHopefully this short introduction has demonstrated how easy and elegant it is to incorporate geospatial context in your applications using Magellan.\u003c/p\u003e\n\u003cp\u003eIn the future, we will go under the hood to examine how Magellan leverages Spark SQL, Data Frames and Catalyst to provide elegant and simple user APIs while ensuring that spatial queries can execute efficiently.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1489655150341_1448951427",
      "id": "20151025-020821_915639433",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Mar 16, 2017 9:05:50 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1489655150341_1448951427",
      "id": "20151025-020931_300901096",
      "dateCreated": "Mar 16, 2017 9:05:50 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Geospatial",
  "id": "2CAEDK5SG",
  "angularObjects": {
    "2C95MKHGJ:shared_process": [],
    "2CAM6X5NB:shared_process": [],
    "2C9WG4M62:shared_process": [],
    "2CB66CEAD:shared_process": [],
    "2C9PNCCYW:shared_process": [],
    "2CAF88TQ9:shared_process": [],
    "2CB3CXC5U:shared_process": [],
    "2CCM15GZZ:shared_process": [],
    "2CCJXAJ4A:shared_process": []
  },
  "config": {},
  "info": {}
}